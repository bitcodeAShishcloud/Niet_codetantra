#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 100
#define TIME_QUANTUM0 8
#define TIME_QUANTUM1 16
#define TIME_QUANTUM2 32

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int completion_time;
    int turnaround_time;
    int queue_level;  // Track current queue level
} Process;

Process processes[MAX_PROCESSES];
int process_count = 0;

void calculate_waiting_turnaround_times() {
    for (int i = 0; i < process_count; i++) {
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}

void print_processes() {
    printf("PID\tArrival\tBurst\tWaiting\tCompletion\tTurnaround\n");
    for (int i = 0; i < process_count; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", 
            processes[i].pid, 
            processes[i].arrival_time, 
            processes[i].burst_time, 
            processes[i].waiting_time, 
            processes[i].completion_time, 
            processes[i].turnaround_time);
    }
}

void mlfq_scheduling() {
    int current_time = 0;
    int completed = 0;

    while (completed < process_count) {
        int queue_empty = 1;

        // Go through each queue in order of priority
        for (int queue_level = 0; queue_level < 3; queue_level++) {
            for (int i = 0; i < process_count; i++) {
                if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0 && processes[i].queue_level == queue_level) {
                    queue_empty = 0;

                    int time_quantum = (queue_level == 0) ? TIME_QUANTUM0 : (queue_level == 1) ? TIME_QUANTUM1 : TIME_QUANTUM2;
                    int time_slice = (processes[i].remaining_time < time_quantum) ? processes[i].remaining_time : time_quantum;

                    // Update the current time for the execution
                    current_time += time_slice;
                    processes[i].remaining_time -= time_slice;

                    if (processes[i].remaining_time == 0) {
                        // Process is completed
                        processes[i].completion_time = current_time;
                        completed++;
                    } else {
                        // Move to the next queue level
                        processes[i].queue_level++;
                    }
                    
                    break;  // Break to restart the for loop after processing an item
                }
            }
            if (!queue_empty) break;  // If a process was found, break the outer loop
        }
        // If no process was found, just increment time
        if (queue_empty) {
            current_time++;
        }
    }
}

int main() {
    printf("Enter number of processes: ");
    scanf("%d", &process_count);
    
    for (int i = 0; i < process_count; i++) {
        processes[i].pid = i + 1;  // PID is index + 1
        printf("Enter arrival time and burst time for process %d: ", processes[i].pid);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time; // Remaining time is initially the burst time
        processes[i].waiting_time = 0; // Initial waiting time
        processes[i].completion_time = 0; // Initial completion time
        processes[i].turnaround_time = 0; // Initial turnaround time
        processes[i].queue_level = 0; // Start in queue 0
    }

    mlfq_scheduling();
    calculate_waiting_turnaround_times();
    print_processes();

    // Calculate averages
    float avg_waiting_time = 0.0, avg_turnaround_time = 0.0;
    for (int i = 0; i < process_count; i++) {
        avg_waiting_time += processes[i].waiting_time;
        avg_turnaround_time += processes[i].turnaround_time;
    }
    avg_waiting_time /= process_count;
    avg_turnaround_time /= process_count;

    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);

    return 0;
}
