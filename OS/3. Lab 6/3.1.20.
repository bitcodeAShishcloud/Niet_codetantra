#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define DISK_SIZE 100

int disk[DISK_SIZE] = {0}; // 0 means free, 1 means allocated

void printMenu() {
    printf("File Allocation Strategies Simulation\n");
    printf("1. Sequential Allocation\n");
    printf("2. Indexed Allocation\n");
    printf("3. Linked Allocation\n");
    printf("4. Exit\n");
}

int isNumber(const char *str) {
    if (str == NULL || *str == '\0') return 0;
    for (int i = 0; str[i]; i++) {
        if (!isdigit((unsigned char)str[i])) return 0;
    }
    return 1;
}

void sequentialAllocation(int file_size) {
    int start = -1;
    int count = 0;

    for (int i = 0; i < DISK_SIZE; i++) {
        if (disk[i] == 0) {
            count++;
            if (count == file_size) {
                start = i - file_size + 1;
                break;
            }
        } else {
            count = 0;
        }
    }

    if (start == -1) {
        printf("Sequential Allocation Failed: Not enough contiguous space\n");
        return;
    }

    printf("Sequential Allocation:\n");
    printf("File blocks:");
    for (int i = start; i < start + file_size; i++) {
        disk[i] = 1;
        printf(" %d", i);
    }
    printf("\n");
}

void indexedAllocation(int file_size) {
    char input[20];
    int index_block;

    printf("Enter index block (0-99): ");
    if (fgets(input, sizeof(input), stdin) == NULL) {
        printf("Invalid index block\n");
        return;
    }
    // Remove newline
    input[strcspn(input, "\n")] = '\0';

    if (!isNumber(input)) {
        printf("Invalid index block\n");
        return;
    }
    index_block = atoi(input);
    if (index_block < 0 || index_block >= DISK_SIZE) {
        printf("Invalid index block\n");
        return;
    }
    if (disk[index_block] == 1) {
        printf("Indexed Allocation Failed: Index block already in use\n");
        return;
    }

    int free_blocks[DISK_SIZE];
    int free_count = 0;

    // Find free blocks excluding index block
    for (int i = 0; i < DISK_SIZE && free_count < file_size; i++) {
        if (disk[i] == 0 && i != index_block) {
            free_blocks[free_count++] = i;
        }
    }

    if (free_count < file_size) {
        printf("Indexed Allocation Failed: Not enough space\n");
        return;
    }

    // Allocate
    disk[index_block] = 1;
    for (int i = 0; i < file_size; i++) {
        disk[free_blocks[i]] = 1;
    }

    printf("Indexed Allocation:\n");
    printf("Index Block: %d\n", index_block);
    printf("File Blocks:");
    for (int i = 0; i < file_size; i++) {
        printf(" %d", free_blocks[i]);
    }
    printf("\n");
}

void linkedAllocation(int file_size) {
    int free_blocks[DISK_SIZE];
    int free_count = 0;

    for (int i = 0; i < DISK_SIZE && free_count < file_size; i++) {
        if (disk[i] == 0) {
            free_blocks[free_count++] = i;
        }
    }

    if (free_count < file_size) {
        printf("Linked Allocation Failed: Not enough space\n");
        return;
    }

    for (int i = 0; i < file_size; i++) {
        disk[free_blocks[i]] = 1;
    }

    printf("Linked Allocation:\n");
    printf("File blocks (linked list):");
    for (int i = 0; i < file_size; i++) {
        printf(" %d", free_blocks[i]);
        if (i < file_size - 1) {
            printf(" ->");
        }
    }
    printf(" -> NULL\n");
}

int main() {
    char choice_str[20];
    int choice;

    while (1) {
        printMenu();
        printf("Enter your choice: ");
        if (fgets(choice_str, sizeof(choice_str), stdin) == NULL) {
            printf("Invalid input\n");
            continue;
        }
        // Remove newline
        choice_str[strcspn(choice_str, "\n")] = '\0';

        if (!isNumber(choice_str)) {
            printf("Invalid input\n");
            continue;
        }

        choice = atoi(choice_str);

        if (choice == 4) {
            break;
        }

        if (choice < 1 || choice > 4) {
            printf("Invalid input\n");
            continue;
        }

        // Get file size
        char file_size_str[20];
        int file_size;
        printf("Enter file size (in blocks): ");
        if (fgets(file_size_str, sizeof(file_size_str), stdin) == NULL) {
            printf("Invalid file size\n");
            continue;
        }
        file_size_str[strcspn(file_size_str, "\n")] = '\0';

        if (!isNumber(file_size_str)) {
            printf("Invalid file size\n");
            continue;
        }

        file_size = atoi(file_size_str);

        if (file_size <= 0 || file_size > 100) {
            printf("Invalid file size\n");
            continue;
        }

        switch (choice) {
            case 1:
                sequentialAllocation(file_size);
                break;
            case 2:
                indexedAllocation(file_size);
                break;
            case 3:
                linkedAllocation(file_size);
                break;
        }
    }
    return 0;
}
